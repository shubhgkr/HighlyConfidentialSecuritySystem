/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.hcss.action;

import java.io.FileNotFoundException;
import java.io.IOException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.hcss.bean.LoginTO;
import com.hcss.bean.UserProfileFormBean;
import com.hcss.cryptutil.Encryption;
import com.hcss.delegate.SecurityUserDelegate;
import com.hcss.exception.ConnectionException;
import com.hcss.utill.UtilConstants;

/**
 * MyEclipse Struts Creation date: 08-31-2012
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 * @struts.action-forward name="failure"
 *                        path="/Status.jsp?status=Registration Fail Please Try again"
 * @struts.action-forward name="success" path=
 *                        "/Status.jsp?status=User Registered SuccessFully Wait for admin accetency."
 */
public class NewRegistrationAction extends Action {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		boolean flag = false;
		String password = request.getParameter("password");
		Encryption ec = new Encryption();
		int a[] = ec.ecies_ex(request.getParameter("password"));
		System.out.println(a);
		String abc = "";
		for (int i = 0; i < a.length; i++) {
			abc = abc + a[i] + ",";
			System.out.println(abc);
		}
		UserProfileFormBean userProfileFormBean = (UserProfileFormBean) form;
		userProfileFormBean.setPassword(abc);

		try {
			flag = new SecurityUserDelegate()
					.newUserRegistration(userProfileFormBean);
			if (flag) {
				request.setAttribute("status", UtilConstants._REGISTER_SUCCESS);
				return mapping.findForward("success");
			} else {
				request.setAttribute("status", UtilConstants._REGISTER_FAIL);
				return mapping.findForward("failure");
			}
		} catch (ConnectionException e) {
			request.setAttribute("status", e.getMessage());
			return mapping.findForward("failure");
		} catch (FileNotFoundException e) {
			request.setAttribute("status", e.getMessage());
			return mapping.findForward("failure");
		} catch (IOException e) {
			request.setAttribute("status", e.getMessage());
			return mapping.findForward("failure");
		}
	}
}